snippet ar "Arrow function"
${1:params} => ${2}
endsnippet

snippet arb "Arrow function with braces" i
${1:params} => {
	${2}
}
endsnippet

snippet par "Arrow function with parens" i
${1:params} => (
	${2}
)
endsnippet

snippet fe "forEach" b
${1:name}.forEach(${2:params} => ${3});
endsnippet

snippet feb "forEach braces" b
${1:name}.forEach(${2:params} => {
	${3}
});
endsnippet

snippet mapa "map" i
${1:name}.map(${2:params} => ${3})
endsnippet

snippet mapab "map braces" i
${1:name}.map(${2:params} => {
	${3}
})
endsnippet

snippet exp "ES6 export" b
export ${1:default}$0
endsnippet

snippet expf "ES6 export function" b
export ${1:default} function ${2:name}(${3:args}) {
	$0
}
endsnippet

snippet ret "return" b
return ${0:result};
endsnippet

snippet sw "switch" b
switch (${1:expression}) {
	$0
	default:
		$2
}
endsnippet

snippet case "reducer case" b
case ${1:expression}:
	$0
endsnippet

snippet class "class" i
class ${1:name}${2: extends }${3:parent} {
	$0
}
endsnippet

snippet meth "method" b
${1:name}(${2:params}) {
	$0
}
endsnippet

snippet type "type"
type ${1:Name} = $0;
endsnippet

snippet foro "for of" b
for (const ${1:value} of ${2:iterable}) {
	$0
}
endsnippet

snippet async "async function" b
async function ${1:name}(${2:params}) {
	$0
}
endsnippet

snippet aw "await" i
await ${1:expression}
endsnippet

snippet propt "propTypes definition" b
${1:name}.propTypes = {
	$0
};
endsnippet

snippet gen "Generator function" i
function* ${1:name}(${2:params}) {
	$0
}
endsnippet

snippet y "yield" b
yield $0;
endsnippet

snippet y* "yield*" b
yield* $0;
endsnippet

#snippet des "describe(...)" b
#describe('${1:description}', () => {
#  $0
#});
#endsnippet

#snippet it "it" b
#it('${1:description}', () => {
#  $0
#});
#endsnippet

#snippet ex "expect" b
#expect(${1:target})$0;
#endsnippet
